#ifdef HX_EE
#define PATCH_NO_STICKERS
(1)
#endif
#ifdef HX_WII
#define PATCH_NO_STICKERS
(1)
#endif
#include macros.dta
#include ../dx/dx_macros.dta
(band_version
   #include band_version.dta)
(mem
   #include mem.dta)
(content_mgr
   (roots
      ".")
   (file_read_failed
      ($content_name $corrupt)
      {do
         ($trans_screen
            {ui transition_screen})
         {if_else
            {'||'
               {== $trans_screen practice_preloading_screen}
               {== $trans_screen preloading_screen}}
            {do
               {{$trans_screen focus_panel}
                  set
                  content_name
                  $content_name}
               {{$trans_screen focus_panel}
                  set
                  corrupt
                  $corrupt}}
            {band_ui content_file_read_failed $content_name $corrupt}}}))
(profile_mgr
   (max_characters 24)
   (max_bands 24)
   (max_remote_bands 50)
   (char_name_length 16)
   (band_name_length 32)
   (motto_length 64))
(platform_mgr
   (ps3_game_data_icon
      "mc/icon0.png")
   (ps3_game_data_version
      "01.00")
   (wii_game_data_icon
      "test/remote_metadata/icon0.png_wii")
   (wii_game_data_version
      "02.00"))
(system
   (language)
   (iop_modules
      (iop/scrtchpd.irx)
      (iop/sio2man.irx)
      (iop/mcman.irx)
      (iop/mcserv.irx)
      #ifdef _SHIP
      (iop/usbd.irx FALSE)
      (iop/usbkb.irx FALSE)
      #else
      (iop/usbd.irx)
      (iop/usbkb.irx
         "keybd=1"
         "debug=0")
      #endif
      (iop/padman.irx)
      (iop/msifrpc.irx)
      #ifdef _SHIP
      (iop/mtapman.irx FALSE)
      #else
      (iop/mtapman.irx)
      #endif
      (iop/libsd.irx)
      (iop/sdrdrv.irx)
      (iop/cdvdstm.irx)
      #ifdef _DEBUG
      (iop/usbhmx_d.irx)
      #else
      #ifdef _SHIP
      (iop/usbhmx_s.irx)
      #else
      (iop/usbhmx_r.irx)
      #endif
      #endif)
   #ifndef HX_WII
   #ifndef HX_PS2
   (ng TRUE)
   #endif
   #endif
   #ifndef HX_PC
   #ifndef HX_PS3
   #ifndef HX_XBOX
   (ng FALSE)
   #endif
   #endif
   #endif
   (xbox_map_file
      "%s/band_%s.map")
   #ifdef HX_PS3
   (commerce_container TRUE)
   (trophies TRUE)
   (np_communication_id
      "NPWR00856_00")
   (titles
      (rb2e
         (title_id
            (live
               "ROCKBAND2")
            (test
               "NPXX00501"))
         (service_id
            (live
               "UP8802-BLUS30462_00")
            (test
               "UP0006-NPXX00501_00"))
      )
      (rb3
         (title_id
            (live
               "ROCKBAND3")
            (test
               "NPXX00500"))
         (service_id
            (live
               "UP8802-BLUS30463_00")
            (test
               "UP0006-NPXX00500_00"))
      )
      #ifdef _LRB_REGION_EU
      (lrb
         (title_id
            (live
               "BLES00636")
            (test
               "NPXX00360"))
         (service_id
            (live
               "EP1018-BLES00636_00")
            (test
               "UP0006-NPXX00360_00"))
      )
      (lrb_usa
         (title_id
            (live
               "BLUS30382")
            (test
               "NPXX00360"))
         (service_id
            (live
               "UP1018-BLUS30382_00")
            (test
               "UP0006-NPXX00360_00"))
      )
      (rb2
         (title_id
            (live
               "BLUS30147")
            (test
               "NPXX00360"))
         (service_id
            (live
               "UP0006-BLUS30147_00")
            (test
               "UP0006-NPXX00360_00"))
      )
      (rb1
         (title_id
            (live
               "BLES00228"))
         (service_id
            (live
               "EP0006-BLES00228_00"))
      )
      (rb1_usa
         (title_id
            (live
               "BLUS30050")
            (test
               "NPXX00202"))
         (service_id
            (live
               "UP0006-BLUS30050_00")
            (test
               "UD2464-NPXX00202_00"))
      )
      #else
      (lrb
         (title_id
            (live
               "BLUS30382")
            (test
               "NPXX00360"))
         (service_id
            (live
               "UP1018-BLUS30382_00")
            (test
               "UP0006-NPXX00360_00"))
      )
      (lrb_eur
         (title_id
            (live
               "BLES00636")
            (test
               "NPXX00360"))
         (service_id
            (live
               "EP1018-BLES00636_00")
            (test
               "UP0006-NPXX00360_00"))
      )
      (rb2
         (title_id
            (live
               "BLUS30147")
            (test
               "NPXX00360"))
         (service_id
            (live
               "UP0006-BLUS30147_00")
            (test
               "UP0006-NPXX00360_00"))
      )
      (rb1
         (title_id
            (live
               "BLUS30050")
            (test
               "NPXX00202"))
         (service_id
            (live
               "UP0006-BLUS30050_00")
            (test
               "UD2464-NPXX00202_00"))
      )
      (rb1_eur
         (title_id
            (live
               "BLES00228"))
         (service_id
            (live
               "EP0006-BLES00228_00"))
      )
      #endif
   )
   #endif
   #ifdef HX_WII
   (load_commerce_container $commerce)
   (titles
      (rb2
         (title_id
            (live
               "BLUS30147")
            (test
               "NPXX00360"))
         (service_id
            (live
               "UP0006-BLUS30147_00")
            (test
               "UP0006-NPXX00360_00"))))
   #endif)
(synth
   #include synth.dta)
(joypad
   #ifdef HX_PS3
   (ignore 4 5 6 7)
   #else
   (ignore)
   #endif
   (hold_ms 300)
   (repeat_ms 50)
   (midi_joypad
      (disable FALSE))
   (controller_mapping
      (ro_guitar guitar)
      (ro_guitar_xbox ro_guitar_xbox)
      (strat_xbox ro_guitar_xbox)
      (strat_xbox_rb2 ro_guitar_xbox)
      (hx_guitar_ps3 hx_guitar_ps3)
      (ps3_rb2_guitar hx_guitar_ps3)
      (ro_guitar_ps3 ro_guitar_ps3)
      (midi midi_drums)
      (hx_drums_xbox hx_drums_xbox)
      (hx_drums_xbox_rb2 hx_drums_xbox)
      (hx_drums_ps3 hx_drums_ps3)
      (hx_drums_ps3_rb2 hx_drums_ps3)
      (hx_drums_ps3_ghwt hx_drums_ps3)
      (hx_drums_ps3_konami hx_drums_ps3)
      (hx_xbox joypad_guitar_xbox)
      (digital joypad)
      (analog joypad)
      (dualshock joypad)
      (stagekit_xbox joypad)
      (wii_remote wii_remote)
      (wii_classic wii_classic)
      (gamecube gamecube)
      (wii_guitar wii_guitar)
      (wii_drums wii_drums)
      (wii_roguitar wii_guitar)
      (wii_rodrums wii_rodrums)
      (none joypad))
   (instrument_mapping
      (ro_guitar $dx_guitar_slot)
      (ro_guitar_xbox $dx_guitar_slot)
      (strat_xbox $dx_guitar_slot)
      (strat_xbox_rb2 $dx_guitar_slot)
      (hx_guitar_ps3 $dx_guitar_slot)
      (ps3_rb2_guitar $dx_guitar_slot)
      (ro_guitar_ps3 $dx_guitar_slot)
      (wii_guitar $dx_guitar_slot)
      (wii_roguitar $dx_guitar_slot)
      (midi $dx_drum_slot)
      (hx_drums_xbox $dx_drum_slot)
      (hx_drums_xbox_rb2 $dx_drum_slot)
      (ps3_rb2_drums $dx_drum_slot)
      (hx_drums_ps3 $dx_drum_slot)
      (hx_drums_ps3_rb2 $dx_drum_slot)
      (hx_drums_ps3_ghwt $dx_drum_slot)
      (hx_drums_ps3_konami $dx_drum_slot)
      (wii_drums $dx_drum_slot)
      (wii_rodrums $dx_drum_slot)
      (hx_xbox $dx_pad_slot)
      (digital $dx_pad_slot)
      (analog $dx_pad_slot)
      (dualshock $dx_pad_slot)
      (stagekit_xbox $dx_pad_slot)
      (wii_remote $dx_pad_slot)
      (wii_classic $dx_pad_slot)
      (gamecube $dx_pad_slot)
      (none kControllerNone)))
(spew
   #include spew.dta)
#ifndef HX_EE
#ifndef HX_WII
#ifndef HX_PC
//
HX_XBOX
AND
HX_PS3
(timer
   (world
      (enable TRUE)
      (draw FALSE))
   (world_regular
      (enable TRUE)
      (budget 9))
   (world_postproc
      (enable TRUE)
      (budget 9))
   (hud_track
      (enable TRUE)
      (budget 6))
   (cpu
      (draw FALSE))
   (cpu_regular
      (enable TRUE)
      (budget 16.7))
   (cpu_postproc
      (enable TRUE)
      (budget 16.7))
   (gs
      (draw FALSE))
   (gs_regular
      (enable TRUE)
      (budget 16.7))
   (gs_postproc
      (enable TRUE)
      (budget 16.7))
   (debug
      (enable TRUE))
   (track_draw
      (enable TRUE))
   (world_draw
      (enable TRUE))
   (vorbis
      (enable TRUE)))
#else
//
HX_PC
(timer
   (world
      (enable TRUE)
      (draw FALSE))
   (world_regular
      (enable TRUE)
      (budget 9))
   (hud_track
      (enable TRUE)
      (budget 6))
   (game_etc
      (enable TRUE)
      (draw FALSE))
   (game_etc_r
      (enable TRUE)
      (budget 1))
   (cpu
      (draw FALSE))
   (cpu_regular
      (enable TRUE)
      (budget 16.7))
   (gs
      (draw FALSE))
   (gs_regular
      (enable TRUE)
      (budget 16.7))
   (synth_poll
      (enable TRUE))
   (net_poll
      (enable TRUE))
   (debug
      (enable TRUE))
   (gamepanel_poll
      (enable TRUE))
   (track_poll
      (enable TRUE))
   (world_poll
      (enable TRUE))
   (nowbar
      (enable TRUE))
   (nowbar_poll
      (enable TRUE))
   (system_poll
      (enable TRUE))
   (taskmgr_poll
      (enable TRUE))
   (synth_poll
      (enable TRUE))
   (track_draw
      (enable TRUE))
   (world_draw
      (enable TRUE))
   (vorbis
      (enable TRUE)))
#endif
#else
//
HX_WII
(timer
   (world
      (enable TRUE)
      (draw FALSE)
      (budget 7))
   (world_regular
      (enable TRUE)
      (budget 9))
   (world_char
      (enable TRUE)
      (budget 9))
   (world_postproc
      (enable TRUE)
      (budget 9))
   (hud_track
      (enable TRUE)
      (budget 6))
   (game_etc
      (enable TRUE))
   (cpu
      (draw FALSE))
   (cpu_regular
      (enable TRUE)
      (budget 16.7))
   (cpu_char
      (enable TRUE)
      (budget 16.7))
   (cpu_postproc
      (enable TRUE)
      (budget 16.7))
   (gs
      (draw FALSE))
   (gs_regular
      (enable TRUE)
      (budget 16.7))
   (gs_char
      (enable TRUE)
      (budget 16.7))
   (gs_postproc
      (enable TRUE)
      (budget 16.7))
   (mesh_char
      (enable TRUE)
      (draw FALSE))
   (world_poll_regular
      (enable TRUE))
   (world_poll_char
      (enable TRUE))
   (world_poll_postproc
      (enable TRUE))
   (world_draw
      (enable TRUE)
      (draw FALSE))
   (world_draw_regular
      (enable TRUE))
   (world_draw_char
      (enable TRUE))
   (world_draw_postproc
      (enable TRUE)))
#endif
#else
//
HX_EE
(timer
   (world
      (enable TRUE)
      (draw FALSE)
      (budget 7))
   (world_regular
      (enable TRUE))
   (world_postproc
      (enable TRUE))
   (hud_track
      (enable TRUE)
      (budget 5))
   (game
      (enable TRUE)
      (budget 1))
   (cpu
      (draw FALSE))
   (cpu_regular
      (enable TRUE)
      (budget 16.7))
   (cpu_postproc
      (enable TRUE)
      (budget 16.7))
   (gs
      (draw FALSE))
   (gs_regular
      (enable TRUE)
      (budget 16.7))
   (gs_postproc
      (enable TRUE)
      (budget 16.7))
   (mesh
      (draw FALSE)
      (enable TRUE))
   (mesh_regular
      (enable TRUE))
   (mesh_postproc
      (enable TRUE))
   (postproc
      (enable TRUE))
   (system_poll
      (enable TRUE))
   (synth_poll
      (enable TRUE))
   (world_poll
      (enable TRUE))
   (track_poll
      (enable TRUE))
   (gamepanel_poll
      (enable TRUE))
   (taskmgr_poll
      (enable TRUE))
   (track_draw
      (enable TRUE))
   (world_draw
      (enable TRUE)))
#endif
(rnd
   (title
      "LEGO Rock Band")
   (overlays
      (time
         (lines 1)
         (showing FALSE)
         (color 0 0 0 0.7))
      (cheats
         (lines 1)
         (showing FALSE)
         (color 0 0 0 0.7))
      (light_preset
         (lines 4)
         (showing FALSE)
         (color 0 0 0 0.5))
      (camera
         (lines 5)
         (showing FALSE)
         (color 0 0 0 0.5))
      (char_status
         (lines 4)
         (showing FALSE))
      (score
         (lines 15)
         (showing FALSE))
      (score_debug
         (lines 1)
         (showing FALSE))
      (lights
         (lines 1)
         (showing FALSE))
      (camtest
         (lines 1)
         (showing FALSE))
      (latency
         (lines 2)
         (showing FALSE)))
   #ifndef HX_EE
   (timer_script
      {set_timer_ms
         game_etc
         {-
            {-
               {-
                  {timer_ms cpu}
                  {timer_ms world}}
               {timer_ms hud_track}}
            {timer_ms debug}}}
      {switch
         {rnd last_proc_cmds}
         (kProcessPost
            {set
               $world_postproc
               {timer_ms world}}
            {set
               $cpu_postproc
               {timer_ms cpu}}
            {set
               $gs_postproc
               {timer_ms gs}}
            {set
               $world_draw_postproc
               {timer_ms world_draw}}
            {set
               $world_poll_postproc
               {timer_ms world_poll}})
         (kProcessChar
            {set
               $world_char
               {timer_ms world}}
            {set
               $cpu_char
               {timer_ms cpu}}
            {set
               $gs_char
               {timer_ms gs}}
            {set
               $mesh_char
               {timer_ms mesh}}
            {set
               $world_draw_char
               {timer_ms world_draw}}
            {set
               $world_poll_char
               {timer_ms world_poll}})
         (kProcessWorld
            {set
               $world_regular
               {timer_ms world}}
            {set
               $cpu_regular
               {timer_ms cpu}}
            {set
               $gs_regular
               {timer_ms gs}}
            {set
               $mesh_regular
               {timer_ms mesh}}
            {set
               $world_draw_regular
               {timer_ms world_draw}}
            {set
               $world_poll_regular
               {timer_ms world_poll}})
         (kProcessPostChar
            {set
               $world_postproc
               {timer_ms world}}
            {set
               $cpu_postproc
               {timer_ms cpu}}
            {set
               $gs_postproc
               {timer_ms gs}}
            {set
               $world_draw_postproc
               {timer_ms world_draw}}
            {set
               $world_poll_postproc
               {timer_ms world_poll}}
            {set $world_char 0}
            {set $cpu_char 0}
            {set $gs_char 0}
            {set $mesh_char 0}
            {set $world_draw_char 0}
            {set $world_poll_char 0})
         (kProcessAll
            {set $world_postproc 0}
            {set $cpu_postproc 0}
            {set $gs_postproc 0}
            {set $world_draw_postproc 0}
            {set $world_poll_postproc 0}
            {set
               $world_regular
               {timer_ms world}}
            {set
               $cpu_regular
               {timer_ms cpu}}
            {set
               $gs_regular
               {timer_ms gs}}
            {set
               $world_draw_regular
               {timer_ms world_draw}}
            {set
               $world_poll_regular
               {timer_ms world_poll}})}
      {set_timer_ms world_postproc $world_postproc}
      {set_timer_ms world_poll_postproc $world_poll_postproc}
      {set_timer_ms world_draw_postproc $world_draw_postproc}
      {set_timer_ms cpu_postproc $cpu_postproc}
      {set_timer_ms gs_postproc $gs_postproc}
      {set_timer_ms mesh_postproc $mesh_postproc}
      {set_timer_ms world_regular $world_regular}
      {set_timer_ms world_poll_regular $world_poll_regular}
      {set_timer_ms world_draw_regular $world_draw_regular}
      {set_timer_ms cpu_regular $cpu_regular}
      {set_timer_ms gs_regular $gs_regular}
      {set_timer_ms mesh_regular $mesh_regular}
      {set_timer_ms world_char $world_char}
      {set_timer_ms world_poll_char $world_poll_char}
      {set_timer_ms world_draw_char $world_draw_char}
      {set_timer_ms cpu_char $cpu_char}
      {set_timer_ms gs_char $gs_char}
      {set_timer_ms mesh_char $mesh_char})
   #endif
   (text_superscript_scale 0.42))
(store
   #ifndef HX_WII
   #include store.dta
   #endif)
(ui
   #include ../fusion/ui/ui.dta)
(attract
   #include attract.dta)
(net
   #ifndef HX_WII
   #include net.dta
   #endif)
(objects
   #include objects.dta)
(locale ../fusion/ui/locale/eng/locale.dta)
(locale_eng
   ../fusion/ui/locale/eng/locale.dta
   #ifdef HX_XBOX
   ../fusion/ui/locale/eng/locale_update_xbox.dta
   #endif
   #ifdef HX_PS3
   ../fusion/ui/locale/eng/locale_update_ps3.dta
   #endif)
(locale_fre
   ../fusion/ui/locale/fre/locale.dta
   #ifdef HX_XBOX
   ../fusion/ui/locale/fre/locale_update_xbox.dta
   #endif
   #ifdef HX_PS3
   ../fusion/ui/locale/fre/locale_update_ps3.dta
   #endif)
(locale_ita
   ../fusion/ui/locale/ita/locale.dta
   #ifdef HX_XBOX
   ../fusion/ui/locale/ita/locale_update_xbox.dta
   #endif
   #ifdef HX_PS3
   ../fusion/ui/locale/ita/locale_update_ps3.dta
   #endif)
(locale_deu
   ../fusion/ui/locale/deu/locale.dta
   #ifdef HX_XBOX
   ../fusion/ui/locale/deu/locale_update_xbox.dta
   #endif
   #ifdef HX_PS3
   ../fusion/ui/locale/deu/locale_update_ps3.dta
   #endif)
(locale_esp
   ../fusion/ui/locale/esp/locale.dta
   #ifdef HX_XBOX
   ../fusion/ui/locale/esp/locale_update_xbox.dta
   #endif
   #ifdef HX_PS3
   ../fusion/ui/locale/esp/locale_update_ps3.dta
   #endif)
(locale_dan
   ../fusion/ui/locale/dan/locale.dta
   #ifdef HX_XBOX
   ../fusion/ui/locale/dan/locale_update_xbox.dta
   #endif
   #ifdef HX_PS3
   ../fusion/ui/locale/dan/locale_update_ps3.dta
   #endif)
(locale_usa
   ../fusion/ui/locale/usa/locale.dta
   #ifdef HX_XBOX
   ../fusion/ui/locale/usa/locale_update_xbox.dta
   #endif
   #ifdef HX_PS3
   ../fusion/ui/locale/usa/locale_update_ps3.dta
   #endif)
(locale_use
   ../fusion/ui/locale/use/locale.dta
   #ifdef HX_XBOX
   ../fusion/ui/locale/use/locale_update_xbox.dta
   #endif
   #ifdef HX_PS3
   ../fusion/ui/locale/use/locale_update_ps3.dta
   #endif)
(locale_usf
   ../fusion/ui/locale/usf/locale.dta
   #ifdef HX_XBOX
   ../fusion/ui/locale/usf/locale_update_xbox.dta
   #endif
   #ifdef HX_PS3
   ../fusion/ui/locale/usf/locale_update_ps3.dta
   #endif)
(illegal_words
   #include ../fusion/ui/illegal_words.dta)
(venues VENUES)
(song_select
   #include song_select.dta)
(song_groupings
   (rank
      ((drum generic_tier1)
         (guitar generic_tier1)
         (bass generic_tier1)
         (vocals generic_tier1)
         (band generic_tier1))
      ((drum generic_tier2)
         (guitar generic_tier2)
         (bass generic_tier2)
         (vocals generic_tier2)
         (band generic_tier2))
      ((drum generic_tier3)
         (guitar generic_tier3)
         (bass generic_tier3)
         (vocals generic_tier3)
         (band generic_tier3))
      ((drum generic_tier4)
         (guitar generic_tier4)
         (bass generic_tier4)
         (vocals generic_tier4)
         (band generic_tier4))
      ((drum generic_tier6)
         (guitar generic_tier6)
         (bass generic_tier6)
         (vocals generic_tier6)
         (band generic_tier6))
      ((drum generic_tier8)
         (guitar generic_tier8)
         (bass generic_tier8)
         (vocals generic_tier8)
         (band generic_tier8))
      ((drum generic_tier9)
         (guitar generic_tier9)
         (bass generic_tier9)
         (vocals generic_tier9)
         (band generic_tier9))))
(missing_song_data
   #ifndef KIOSK_DEMO
   #include ../songs/rb1/missing_song_data.dta
   #endif)
(quick_cheats
   #include cheats.dta)
(long_cheats
   #include long_cheats.dta)
(modifiers
   #include modifiers.dta)
(beatmatcher
   #include beatmatcher.dta)
(game
   #include game.dta)
(modes
   #include modes.dta)
(player
   #include player.dta)
(scoring
   #include scoring.dta)
(achievements
   #include achievements.dta)
(track_graphics
   #include track_graphics.dta)
(sound
   #include sound.dta)
(tour
   #include ../fusion/tour/tour.dta)
(hud
   (crowd_meter
      (speed 0.9))
   (star_meter
      (speed 0.9))
   (lead_meter
      (max_lead 10000))
   (message_show_time 2.5)
   (sp_deploy_msg_delay 1.5)
   (sp_deploy_repeat_delay 7)
   (botb_names_fade_out_seconds 9)
   (botb_names_fade_in_seconds 10))
(characters
   #include characters.dta
   #include characters_ink.dta)
(tips
   (#include tips.dta))
(loading_screens
   (#include loading_screens.dta))
(videos
   #include videos.dta)
(data_graveyard)
(helpbar
   #ifdef HX_WII
   (guitar_icon_width 22)
   (drum_icon_width 20)
   (vocal_icon_width 20)
   #else
   (drum_icon_width 18)
   (vocal_icon_width 18)
   (guitar_icon_width 20)
   #endif
   (start_icon_width 18)
   #ifdef HX_WII
   (label_space 3)
   #else
   (label_space 0)
   #endif
   #ifdef HX_PS3
   (option_icon_width 25)
   #else
   #ifdef HX_WII
   (option_icon_width 25)
   #else
   (option_icon_width 20)
   #endif
   #endif)
(lego_challenges
   #include ../lego_challenges/lego_challenges.dta)
(cutscenes
   #include ../cutscenes/cutscenes.dta)
(debug_quickplay
   #include ../fusion/tour/debug_quickplay.dta)
(buzz
   #include ../fusion/tour/buzz.dta)
(generate_wavdata FALSE)
(vocal_score_song FALSE)
#merge ../../../system/run/config/default.dta
